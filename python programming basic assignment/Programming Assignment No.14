1)
def divisible(n):
    i=0
    while(i<=n):
        if(i%7==0):
            yield i
        i+=1

n=int(input("Enter Number: "))
for i in divisible(n):
    print(i)
    
2)
n = input()
mylist = n.split(" ")
my_dict = {i:mylist.count(i) for i in mylist}
for key,values in sorted(my_dict.items()):
    print(key,":",values)
    
3)
class Person:
    def __str__(self):
        return "Person Class"
    
class Male(Person):
    def getGender(self):
            return "Male"
        
    def __str__(self):
        return "Male Class"
    
class Female(Person):
    def getGender(self):
            return "Female"
    def __str__(self):
        return "Female Class"

maleOb=Male()
femOb=Female()
print(maleOb.getGender())
print(femOb.getGender())

4)
subject=["I", "You"]
verb=["Play", "Love"]
obj=["Cricket","Football"]
sentence_list = [(sub+" "+ vb + " " + ob) for sub in subject for vb in verb for ob in obj]
for sentence in sentence_list:
    print (sentence)
    
5)
n = "hello world!hello world!hello world!hello world!"
mylist = n.split(" ")
my_dict = {i:mylist.count(i) for i in mylist}
result = ""
for key,values in sorted(my_dict.items()):
    result = result + str(key) + str(values)
print("Compressed String: " , result)

6)
import logging as log
log.basicConfig(filename='error.log' , level=log.info)
class binarySearch:
    def search(key):
        try:
            flag = 0
            for i in range(len(li)):
                if li[i]==key:
                    return i
            if(flag==0):
                return "Key not found"
        except Exception as e:
            lg.info(e)
    def __str__(self):
        return "Binary search Class created"
    
try:
    n = int(input("Enter length of list: "))
    print("Please Enter {} Elements: ".format(n))
    li=[]
    for i in range(1,n+1):
        print("Enter {} Element: ".format(i))
        num = int(input())
        li.append(num)
    print("Enter Key you want to search: ")
    key = int(input())
    ob=binarySearch
    print(ob.search(key))
except Exception as e:
            log.info(i)